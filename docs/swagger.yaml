basePath: /api
definitions:
  apis.BookCreateRequest:
    properties:
      author:
        minLength: 1
        type: string
      description:
        type: string
      isbn:
        minLength: 1
        type: string
      press:
        minLength: 1
        type: string
      price:
        minimum: 0
        type: number
      published_date:
        type: string
      title:
        minLength: 1
        type: string
    required:
    - author
    - isbn
    - press
    - title
    type: object
  apis.BookModifyRequest:
    properties:
      author:
        minLength: 1
        type: string
      description:
        type: string
      on_sale:
        type: boolean
      press:
        minLength: 1
        type: string
      price:
        minimum: 0
        type: number
      published_date:
        type: string
      title:
        minLength: 1
        type: string
    type: object
  apis.LoginRequest:
    properties:
      password:
        maxLength: 30
        minLength: 8
        type: string
      username:
        minLength: 1
        type: string
    required:
    - password
    - username
    type: object
  apis.PurchaseCreateRequest:
    properties:
      book_id:
        minimum: 1
        type: integer
      price:
        minimum: 0
        type: number
      quantity:
        minimum: 1
        type: integer
    required:
    - book_id
    - price
    - quantity
    type: object
  apis.PurchaseModifyRequest:
    properties:
      price:
        minimum: 0
        type: number
      quantity:
        minimum: 1
        type: integer
    type: object
  apis.RegisterRequest:
    properties:
      avatar:
        type: string
      gender:
        type: string
      is_admin:
        default: false
        type: boolean
      password:
        maxLength: 30
        minLength: 8
        type: string
      real_name:
        type: string
      staff_id:
        type: string
      username:
        minLength: 1
        type: string
    required:
    - password
    - username
    type: object
  apis.UserModifyRequest:
    properties:
      avatar:
        type: string
      gender:
        type: string
      is_admin:
        default: false
        type: boolean
      password:
        maxLength: 30
        minLength: 8
        type: string
      real_name:
        type: string
      staff_id:
        type: string
      username:
        minLength: 1
        type: string
    type: object
  models.Book:
    properties:
      author:
        type: string
      cover:
        description: cover url or base64, null if not set
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      isbn:
        type: string
      on_sale:
        type: boolean
      press:
        type: string
      price:
        type: number
      published_date:
        type: string
      stock:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.Purchase:
    properties:
      arrived:
        description: 已付款状态下可收货
        type: boolean
      book:
        $ref: '#/definitions/models.Book'
      book_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      paid:
        type: boolean
      price:
        type: number
      quantity:
        type: integer
      returned:
        description: 未付款状态下可退货
        type: boolean
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      avatar:
        type: string
      gender:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      last_login:
        type: string
      real_name:
        type: string
      register_time:
        type: string
      staff_id:
        type: string
      username:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: jingyijun3104@outlook.com
    name: JingYiJun
    url: https://www.jingyijun.xyz
  description: This is a Book Management System backend for Fudan 2023 midterm Project
    of Database course.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://swagger.io/terms/
  title: Book Management System Backend
  version: 0.0.1
paths:
  /books:
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: author
        type: string
      - default: id
        enum:
        - id
        - isbn
        - updated_at
        - created_at
        - title
        - author
        - press
        - published_date
        - price
        - stock
        in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page_num
        required: true
        type: integer
      - in: query
        maximum: 100
        minimum: 10
        name: page_size
        required: true
        type: integer
      - in: query
        name: press
        type: string
      - default: asc
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      - in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: List books
      tags:
      - Book
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.BookCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
      summary: Create a book
      tags:
      - Book
  /books/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: Get a book by id/isbn
      tags:
      - Book
    patch:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.BookModifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: Modify a book
      tags:
      - Book
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Login
      tags:
      - Account
  /purchases:
    get:
      parameters:
      - in: query
        name: bookID
        type: integer
      - default: id
        enum:
        - id
        - created_at
        - updated_at
        - book_id
        - user_id
        in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page_num
        required: true
        type: integer
      - in: query
        maximum: 100
        minimum: 10
        name: page_size
        required: true
        type: integer
      - default: asc
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      - in: query
        name: userID
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Purchase'
            type: array
      summary: List purchases
      tags:
      - Purchase
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.PurchaseCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Purchase'
      summary: Create a purchase
      tags:
      - Purchase
  /purchases/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Purchase'
      summary: Get a purchase by id
      tags:
      - Purchase
    patch:
      consumes:
      - application/json
      description: Modify the quantity or price of a purchase by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.PurchaseModifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Purchase'
      summary: Modify a purchase
      tags:
      - Purchase
  /purchases/{id}/_arrive:
    post:
      description: Arrive a purchase by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Purchase'
      summary: Arrive a purchase
      tags:
      - Purchase
  /purchases/{id}/_pay:
    post:
      description: Pay a purchase by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Purchase'
      summary: Pay a purchase
      tags:
      - Purchase
  /purchases/{id}/_return:
    post:
      description: Return a purchase by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Purchase'
      summary: Return a purchase
      tags:
      - Purchase
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: Register, admin only
      tags:
      - Account
  /users:
    get:
      consumes:
      - application/json
      parameters:
      - default: id
        enum:
        - id
        - username
        - staff_id
        - register_time
        - last_login
        in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page_num
        required: true
        type: integer
      - in: query
        maximum: 100
        minimum: 10
        name: page_size
        required: true
        type: integer
      - default: asc
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: list users, admin only
      tags:
      - Account
  /users/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: delete a user by id, admin only
      tags:
      - Account
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: get a user by id/username/staff_id, admin only
      tags:
      - Account
    patch:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apis.UserModifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: modify a user by id, admin only
      tags:
      - Account
  /users/me:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: delete self
      tags:
      - Account
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get current user
      tags:
      - Account
    patch:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/apis.UserModifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: modify current user
      tags:
      - Account
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
